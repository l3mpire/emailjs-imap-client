"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imapCommandChannel = exports.DiagnosticsChannel = void 0;
var _dcPolyfill = _interopRequireDefault(require("dc-polyfill"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
var _channelName = /*#__PURE__*/new WeakMap();
class DiagnosticsChannel {
  constructor(channelName) {
    _classPrivateFieldInitSpec(this, _channelName, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _channelName, channelName);
    this.channel = _dcPolyfill.default.channel(channelName);
  }
  publish(data) {
    this.channel.publish(data);
  }
  subscribe(cb) {
    _dcPolyfill.default.subscribe(_classPrivateFieldGet(this, _channelName), cb);
  }
  unsubscribe(cb) {
    _dcPolyfill.default.unsubscribe(_classPrivateFieldGet(this, _channelName), cb);
  }
}
exports.DiagnosticsChannel = DiagnosticsChannel;
const imapCommandChannel = new DiagnosticsChannel('emailjs-imap-client:command');
exports.imapCommandChannel = imapCommandChannel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGNQb2x5ZmlsbCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsInByaXZhdGVNYXAiLCJ2YWx1ZSIsIl9jaGVja1ByaXZhdGVSZWRlY2xhcmF0aW9uIiwic2V0IiwicHJpdmF0ZUNvbGxlY3Rpb24iLCJoYXMiLCJUeXBlRXJyb3IiLCJfY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsImRlc2NyaXB0b3IiLCJfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yIiwiX2NsYXNzQXBwbHlEZXNjcmlwdG9yR2V0IiwiZ2V0IiwiY2FsbCIsIl9jbGFzc1ByaXZhdGVGaWVsZFNldCIsIl9jbGFzc0FwcGx5RGVzY3JpcHRvclNldCIsImFjdGlvbiIsIndyaXRhYmxlIiwiX2NoYW5uZWxOYW1lIiwiV2Vha01hcCIsIkRpYWdub3N0aWNzQ2hhbm5lbCIsImNvbnN0cnVjdG9yIiwiY2hhbm5lbE5hbWUiLCJjaGFubmVsIiwiZGlhZ25vc3RpY3NfY2hhbm5lbCIsInB1Ymxpc2giLCJkYXRhIiwic3Vic2NyaWJlIiwiY2IiLCJ1bnN1YnNjcmliZSIsImV4cG9ydHMiLCJpbWFwQ29tbWFuZENoYW5uZWwiXSwic291cmNlcyI6WyIuLi9zcmMvZGlhZ25vc3RpY3MtY2hhbm5lbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGlhZ25vc3RpY3NfY2hhbm5lbCBmcm9tICdkYy1wb2x5ZmlsbCc7XG5cbmV4cG9ydCBjbGFzcyBEaWFnbm9zdGljc0NoYW5uZWwge1xuICAjY2hhbm5lbE5hbWU7XG5cbiAgY29uc3RydWN0b3IoY2hhbm5lbE5hbWUpIHtcbiAgICB0aGlzLiNjaGFubmVsTmFtZSA9IGNoYW5uZWxOYW1lO1xuICAgIHRoaXMuY2hhbm5lbCA9IGRpYWdub3N0aWNzX2NoYW5uZWwuY2hhbm5lbChjaGFubmVsTmFtZSk7XG4gIH1cblxuICBwdWJsaXNoKGRhdGEpIHtcbiAgICB0aGlzLmNoYW5uZWwucHVibGlzaChkYXRhKTtcbiAgfVxuXG4gIHN1YnNjcmliZShjYikge1xuICAgIGRpYWdub3N0aWNzX2NoYW5uZWwuc3Vic2NyaWJlKHRoaXMuI2NoYW5uZWxOYW1lLCBjYik7XG4gIH07XG5cbiAgdW5zdWJzY3JpYmUoY2IpIHtcbiAgICBkaWFnbm9zdGljc19jaGFubmVsLnVuc3Vic2NyaWJlKHRoaXMuI2NoYW5uZWxOYW1lLCBjYik7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBpbWFwQ29tbWFuZENoYW5uZWwgPSBuZXcgRGlhZ25vc3RpY3NDaGFubmVsKCdlbWFpbGpzLWltYXAtY2xpZW50OmNvbW1hbmQnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsV0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQThDLFNBQUFELHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQUEsU0FBQUcsMkJBQUFILEdBQUEsRUFBQUksVUFBQSxFQUFBQyxLQUFBLElBQUFDLDBCQUFBLENBQUFOLEdBQUEsRUFBQUksVUFBQSxHQUFBQSxVQUFBLENBQUFHLEdBQUEsQ0FBQVAsR0FBQSxFQUFBSyxLQUFBO0FBQUEsU0FBQUMsMkJBQUFOLEdBQUEsRUFBQVEsaUJBQUEsUUFBQUEsaUJBQUEsQ0FBQUMsR0FBQSxDQUFBVCxHQUFBLGVBQUFVLFNBQUE7QUFBQSxTQUFBQyxzQkFBQUMsUUFBQSxFQUFBUixVQUFBLFFBQUFTLFVBQUEsR0FBQUMsNEJBQUEsQ0FBQUYsUUFBQSxFQUFBUixVQUFBLGlCQUFBVyx3QkFBQSxDQUFBSCxRQUFBLEVBQUFDLFVBQUE7QUFBQSxTQUFBRSx5QkFBQUgsUUFBQSxFQUFBQyxVQUFBLFFBQUFBLFVBQUEsQ0FBQUcsR0FBQSxXQUFBSCxVQUFBLENBQUFHLEdBQUEsQ0FBQUMsSUFBQSxDQUFBTCxRQUFBLFlBQUFDLFVBQUEsQ0FBQVIsS0FBQTtBQUFBLFNBQUFhLHNCQUFBTixRQUFBLEVBQUFSLFVBQUEsRUFBQUMsS0FBQSxRQUFBUSxVQUFBLEdBQUFDLDRCQUFBLENBQUFGLFFBQUEsRUFBQVIsVUFBQSxVQUFBZSx3QkFBQSxDQUFBUCxRQUFBLEVBQUFDLFVBQUEsRUFBQVIsS0FBQSxVQUFBQSxLQUFBO0FBQUEsU0FBQVMsNkJBQUFGLFFBQUEsRUFBQVIsVUFBQSxFQUFBZ0IsTUFBQSxTQUFBaEIsVUFBQSxDQUFBSyxHQUFBLENBQUFHLFFBQUEsZUFBQUYsU0FBQSxtQkFBQVUsTUFBQSwrQ0FBQWhCLFVBQUEsQ0FBQVksR0FBQSxDQUFBSixRQUFBO0FBQUEsU0FBQU8seUJBQUFQLFFBQUEsRUFBQUMsVUFBQSxFQUFBUixLQUFBLFFBQUFRLFVBQUEsQ0FBQU4sR0FBQSxJQUFBTSxVQUFBLENBQUFOLEdBQUEsQ0FBQVUsSUFBQSxDQUFBTCxRQUFBLEVBQUFQLEtBQUEsaUJBQUFRLFVBQUEsQ0FBQVEsUUFBQSxjQUFBWCxTQUFBLGdEQUFBRyxVQUFBLENBQUFSLEtBQUEsR0FBQUEsS0FBQTtBQUFBLElBQUFpQixZQUFBLG9CQUFBQyxPQUFBO0FBRXZDLE1BQU1DLGtCQUFrQixDQUFDO0VBRzlCQyxXQUFXQSxDQUFDQyxXQUFXLEVBQUU7SUFBQXZCLDBCQUFBLE9BQUFtQixZQUFBO01BQUFELFFBQUE7TUFBQWhCLEtBQUE7SUFBQTtJQUN2QmEscUJBQUEsS0FBSSxFQUFBSSxZQUFBLEVBQWdCSSxXQUFXO0lBQy9CLElBQUksQ0FBQ0MsT0FBTyxHQUFHQyxtQkFBbUIsQ0FBQ0QsT0FBTyxDQUFDRCxXQUFXLENBQUM7RUFDekQ7RUFFQUcsT0FBT0EsQ0FBQ0MsSUFBSSxFQUFFO0lBQ1osSUFBSSxDQUFDSCxPQUFPLENBQUNFLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDO0VBQzVCO0VBRUFDLFNBQVNBLENBQUNDLEVBQUUsRUFBRTtJQUNaSixtQkFBbUIsQ0FBQ0csU0FBUyxDQUFBcEIscUJBQUEsQ0FBQyxJQUFJLEVBQUFXLFlBQUEsR0FBZVUsRUFBRSxDQUFDO0VBQ3REO0VBRUFDLFdBQVdBLENBQUNELEVBQUUsRUFBRTtJQUNkSixtQkFBbUIsQ0FBQ0ssV0FBVyxDQUFBdEIscUJBQUEsQ0FBQyxJQUFJLEVBQUFXLFlBQUEsR0FBZVUsRUFBRSxDQUFDO0VBQ3hEO0FBQ0Y7QUFBQ0UsT0FBQSxDQUFBVixrQkFBQSxHQUFBQSxrQkFBQTtBQUVNLE1BQU1XLGtCQUFrQixHQUFHLElBQUlYLGtCQUFrQixDQUFDLDZCQUE2QixDQUFDO0FBQUNVLE9BQUEsQ0FBQUMsa0JBQUEsR0FBQUEsa0JBQUEifQ==