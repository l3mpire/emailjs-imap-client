"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parserHelper = void 0;

var _common = require("./common");

var _emailjsImapHandler = require("emailjs-imap-handler");

const isUnexpectedCharError = e => e && e.message && e.message.toLowerCase().indexOf('unexpected char at position') !== -1; // according to the https://www.rfc-editor.org/rfc/rfc2047


const encodedWordsRegex = /=\?[^?]+\?[^?]+\?(.+?)\?=/ig;

const sanitizeEncodedWords = command => {
  const allMatches = command.matchAll(encodedWordsRegex);
  let changedCommand = command;

  for (const match of allMatches) {
    if (match.length !== 2) {
      continue;
    }

    if (match[1].indexOf('"') === -1) {
      continue;
    }

    const repl = match[1].replaceAll(/"/ig, '');
    changedCommand = changedCommand.replace(match[1], repl);
  }

  return changedCommand;
};

const parsingHacks = [{
  // parsing hack in situation when last character breaks parsing
  func: (command, opts) => (0, _emailjsImapHandler.parser)(command.slice(0, -1), opts),
  condition: (command, e) => e && e.message === `Unexpected char at position ${command.length - 1}` && typeof command.slice === 'function'
}, {
  // parsing hack which is caused by provider returning command with two sequential double quotes ""
  func: (command, opts) => (0, _emailjsImapHandler.parser)((0, _common.toTypedArray)((0, _common.fromTypedArray)(command).replaceAll(/""/ig, '"')), opts),
  condition: (command, e) => isUnexpectedCharError(e)
}, {
  // parsing hack which is caused by provider returning command with encoded-words with quotes in ATOM instructions
  func: (command, opts) => (0, _emailjsImapHandler.parser)((0, _common.toTypedArray)(sanitizeEncodedWords((0, _common.fromTypedArray)(command))), opts),
  condition: (command, e) => isUnexpectedCharError(e) && (0, _common.fromTypedArray)(command).search(encodedWordsRegex) !== -1
}];

const parserHelper = (command, opts) => {
  try {
    return (0, _emailjsImapHandler.parser)(command, opts);
  } catch (e) {
    for (let i = 0; i < parsingHacks.length; i++) {
      const attempt = parsingHacks[i];

      if (!attempt.condition(command, e)) {
        continue;
      }

      try {
        return attempt.func(command, opts);
      } catch (e) {}
    }

    throw e;
  }
};

exports.parserHelper = parserHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1VuZXhwZWN0ZWRDaGFyRXJyb3IiLCJlIiwibWVzc2FnZSIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsImVuY29kZWRXb3Jkc1JlZ2V4Iiwic2FuaXRpemVFbmNvZGVkV29yZHMiLCJjb21tYW5kIiwiYWxsTWF0Y2hlcyIsIm1hdGNoQWxsIiwiY2hhbmdlZENvbW1hbmQiLCJtYXRjaCIsImxlbmd0aCIsInJlcGwiLCJyZXBsYWNlQWxsIiwicmVwbGFjZSIsInBhcnNpbmdIYWNrcyIsImZ1bmMiLCJvcHRzIiwicGFyc2VyIiwic2xpY2UiLCJjb25kaXRpb24iLCJ0b1R5cGVkQXJyYXkiLCJmcm9tVHlwZWRBcnJheSIsInNlYXJjaCIsInBhcnNlckhlbHBlciIsImkiLCJhdHRlbXB0Il0sInNvdXJjZXMiOlsiLi4vc3JjL3BhcnNlci1oZWxwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9UeXBlZEFycmF5LCBmcm9tVHlwZWRBcnJheSB9IGZyb20gJy4vY29tbW9uJ1xuaW1wb3J0IHsgcGFyc2VyIH0gZnJvbSAnZW1haWxqcy1pbWFwLWhhbmRsZXInXG5cbmNvbnN0IGlzVW5leHBlY3RlZENoYXJFcnJvciA9IGUgPT4gZSAmJiBlLm1lc3NhZ2UgJiYgZS5tZXNzYWdlLnRvTG93ZXJDYXNlKClcbiAgLmluZGV4T2YoJ3VuZXhwZWN0ZWQgY2hhciBhdCBwb3NpdGlvbicpICE9PSAtMVxuXG4vLyBhY2NvcmRpbmcgdG8gdGhlIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmMyMDQ3XG5jb25zdCBlbmNvZGVkV29yZHNSZWdleCA9IC89XFw/W14/XStcXD9bXj9dK1xcPyguKz8pXFw/PS9pZ1xuXG5jb25zdCBzYW5pdGl6ZUVuY29kZWRXb3JkcyA9IGNvbW1hbmQgPT4ge1xuICBjb25zdCBhbGxNYXRjaGVzID0gY29tbWFuZC5tYXRjaEFsbChlbmNvZGVkV29yZHNSZWdleClcblxuICBsZXQgY2hhbmdlZENvbW1hbmQgPSBjb21tYW5kXG5cbiAgZm9yIChjb25zdCBtYXRjaCBvZiBhbGxNYXRjaGVzKSB7XG4gICAgaWYgKG1hdGNoLmxlbmd0aCAhPT0gMikge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hbMV0uaW5kZXhPZignXCInKSA9PT0gLTEpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgY29uc3QgcmVwbCA9IG1hdGNoWzFdLnJlcGxhY2VBbGwoL1wiL2lnLCAnJylcblxuICAgIGNoYW5nZWRDb21tYW5kID0gY2hhbmdlZENvbW1hbmQucmVwbGFjZShtYXRjaFsxXSwgcmVwbClcbiAgfVxuXG4gIHJldHVybiBjaGFuZ2VkQ29tbWFuZFxufVxuXG5jb25zdCBwYXJzaW5nSGFja3MgPSBbXG4gIHtcbiAgICAvLyBwYXJzaW5nIGhhY2sgaW4gc2l0dWF0aW9uIHdoZW4gbGFzdCBjaGFyYWN0ZXIgYnJlYWtzIHBhcnNpbmdcbiAgICBmdW5jOiAoY29tbWFuZCwgb3B0cykgPT4gcGFyc2VyKGNvbW1hbmQuc2xpY2UoMCwgLTEpLCBvcHRzKSxcbiAgICBjb25kaXRpb246IChjb21tYW5kLCBlKSA9PiBlICYmIGUubWVzc2FnZSA9PT0gYFVuZXhwZWN0ZWQgY2hhciBhdCBwb3NpdGlvbiAke2NvbW1hbmQubGVuZ3RoIC0gMX1gICYmIHR5cGVvZiBjb21tYW5kLnNsaWNlID09PSAnZnVuY3Rpb24nXG4gIH0sXG4gIHtcbiAgICAvLyBwYXJzaW5nIGhhY2sgd2hpY2ggaXMgY2F1c2VkIGJ5IHByb3ZpZGVyIHJldHVybmluZyBjb21tYW5kIHdpdGggdHdvIHNlcXVlbnRpYWwgZG91YmxlIHF1b3RlcyBcIlwiXG4gICAgZnVuYzogKGNvbW1hbmQsIG9wdHMpID0+IHBhcnNlcih0b1R5cGVkQXJyYXkoZnJvbVR5cGVkQXJyYXkoY29tbWFuZCkucmVwbGFjZUFsbCgvXCJcIi9pZywgJ1wiJykpLCBvcHRzKSxcbiAgICBjb25kaXRpb246IChjb21tYW5kLCBlKSA9PiBpc1VuZXhwZWN0ZWRDaGFyRXJyb3IoZSlcbiAgfSxcbiAge1xuICAgIC8vIHBhcnNpbmcgaGFjayB3aGljaCBpcyBjYXVzZWQgYnkgcHJvdmlkZXIgcmV0dXJuaW5nIGNvbW1hbmQgd2l0aCBlbmNvZGVkLXdvcmRzIHdpdGggcXVvdGVzIGluIEFUT00gaW5zdHJ1Y3Rpb25zXG4gICAgZnVuYzogKGNvbW1hbmQsIG9wdHMpID0+IHBhcnNlcih0b1R5cGVkQXJyYXkoc2FuaXRpemVFbmNvZGVkV29yZHMoZnJvbVR5cGVkQXJyYXkoY29tbWFuZCkpKSwgb3B0cyksXG4gICAgY29uZGl0aW9uOiAoY29tbWFuZCwgZSkgPT4gaXNVbmV4cGVjdGVkQ2hhckVycm9yKGUpICYmIGZyb21UeXBlZEFycmF5KGNvbW1hbmQpLnNlYXJjaChlbmNvZGVkV29yZHNSZWdleCkgIT09IC0xXG4gIH1cbl1cblxuZXhwb3J0IGNvbnN0IHBhcnNlckhlbHBlciA9IChjb21tYW5kLCBvcHRzKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHBhcnNlcihjb21tYW5kLCBvcHRzKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJzaW5nSGFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0dGVtcHQgPSBwYXJzaW5nSGFja3NbaV1cblxuICAgICAgaWYgKCFhdHRlbXB0LmNvbmRpdGlvbihjb21tYW5kLCBlKSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXR0ZW1wdC5mdW5jKGNvbW1hbmQsIG9wdHMpXG4gICAgICB9IGNhdGNoIChlKSB7IH1cbiAgICB9XG5cbiAgICB0aHJvdyBlXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBLE1BQU1BLHFCQUFxQixHQUFHQyxDQUFDLElBQUlBLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxPQUFQLElBQWtCRCxDQUFDLENBQUNDLE9BQUYsQ0FBVUMsV0FBVixHQUNsREMsT0FEa0Qs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